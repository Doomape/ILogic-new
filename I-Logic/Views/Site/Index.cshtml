@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/SiteMaster.cshtml";
}

<h2>Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

Many people using dummy content on a standard-sized monitor will not notice this issue. Some might even argue that it’s not worth fixing at all… but I think they’re wrong, and just in case you agree, I’m going to show you a simple way to fix it.

The Problem:

In case you didn’t see the graphic above, or didn’t understand, here it is in a nutshell:

When a page contains a large amount of content, the footer is pushed down off the viewport, and if you scroll down, the page ‘ends’ at the footer. However, if the page has small amount of content, the footer can sometimes ‘cling’ to the bottom of the content, floating halfway down the page, and leaving a blank space underneath.

Depending on the design, this can look a little amateur, and it’s especially bad on large screens.

I’ve seen many failed attempts to fix this with absolute positioning, where the footer is forcibly positioned at the bottom of the screen – which usually ends up in it either overlapping (hiding) the bottom of the page content, or staying in the same position when the viewport is scrolled (eg. flying up the page when you scroll down) or not being pushed down far enough, or floating at the top of the page.

I’ve even seen people ‘fix’ it with Javascript, finding out the height of the page and pushing the footer down after page load. 8-O

Bad times.

The Solution:

… is suitable for use on almost any HTML/CSS layout, perfectly cross-browser compatible and 100% valid, degrades gracefully, doesn’t rely on any hacks (though one is possible for IE6), and most importantly, is damn easy : )

</h2>
